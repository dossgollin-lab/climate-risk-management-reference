---
title: "Julia Learning Resources ✏️"
---

The computational examples in this textbook use the Julia programming language.

## Why Julia?

Julia is a fast, modern, open-source programming language designed for scientific and numerical computing.
The language is designed to be fast, dynamic, and easy to use and maintain.

Key advantages for this textbook include:

- High-Level Syntax: Julia has a clean and expressive syntax that closely parallels mathematical notation.
- Performance: Julia compiles to efficient machine code, achieving speeds comparable to low-level languages like C and Fortran.
  This solves the "two-language problem," where you might prototype in a high-level language but need to rewrite for performance.
- Simplified Dependencies: Eliminates or reduces the need for dependencies on C and Fortran libraries, which simplifies installation and maintenance.
- Open-Source and Shareable: Julia is completely open-source with excellent package management for reproducible research environments.
- Strong Ecosystem: Despite being newer, Julia has a rapidly growing ecosystem of high-quality libraries for scientific domains.

While Julia is powerful for computational thinking and research, many ecosystems remain stronger in other languages (like Python's deep learning and climate data analysis tools), so a well-rounded programmer benefits from learning multiple languages.

You can read more about Julia's design philosophy:

- [Julia Data Science](https://juliadatascience.io/why_julia) textbook is didactic and clear
- [Why We Created Julia](https://julialang.org/blog/2012/02/why-we-created-julia/) from the founders
- [Why Julia Manifesto](https://github.com/Datseris/whyjulia-manifesto) is more comprehensive

## Learning resources

This textbook aims to never reinvent the wheel.
There are lots of exceptional resources for learning Julia, or for learning computational concepts with Juila.
Here are some favorites:

- MIT's [Introduction to Computational Thinking](https://computationalthinking.mit.edu): Julia-based course covering applied mathematics and computational thinking
- [Julia for Nervous Beginners](https://juliaacademy.com/p/julia-programming-for-nervous-beginners): free course for people hesitant but curious about learning Julia
- [Julia Data Science](https://juliadatascience.io/): comprehensive introduction to data science with Julia
- [FastTrack to Julia cheatsheet](https://juliadocs.github.io/Julia-Cheat-Sheet/)
- [Comprehensive Julia Tutorials](https://www.youtube.com/playlist?list=PLCXbkShHt01seTlnlVg6O7f6jKGTguFi7): YouTube playlist covering Julia topics
- [Matlab-Python-Julia Cheatsheet](https://cheatsheets.quantecon.org/): helpful if you're experienced in one of these languages

### Specialized topics

Here are some additional resources for specific Julia tools and packages developed in this class

- Plotting: [Makie Tutorials](https://docs.makie.org/stable/tutorials/) and [MakieCon 2023 YouTube Channel](https://youtube.com/playlist?list=PLP8iPy9hna6TXEn99mhG5KaTgjsrCkDzQ&feature=shared)
- Statistical Modeling: [Turing.jl tutorials](https://turinglang.org/docs/getting-started/) has detailed examples of using Turing for modeling
